--[[
    Arcane Script Hub - Cosmic Liquid Glass Interface
    Changes in this version:
    - Gradient overlay uses 120,72,144 -> 198,211,227 (translucent)
    - Keybind set to RightBracket (']')
    - 'Executed' label after run
]]

--// Services
local Players = game:GetService('Players')
local TweenService = game:GetService('TweenService')
local HttpService = game:GetService('HttpService')
local RunService = game:GetService('RunService')
local UserInputService = game:GetService('UserInputService')
local SoundService = game:GetService('SoundService')

--// Player
local Player = Players.LocalPlayer
local PlayerGui = Player:WaitForChild('PlayerGui')

--// Script Configuration
local SCRIPTS = {
    {
        name = 'Auto Fishing',
        description = 'Automated fishing',
        url = 'https://raw.githubusercontent.com/SultrySlut/arcane/refs/heads/main/auto-fishing-gui.txt',
        category = 'Automation',
        icon = 'üé£',
    },
    {
        name = 'Auto Siren Rock Builder',
        description = 'Automatically builds platforms at Siren Rock',
        url = 'https://raw.githubusercontent.com/SultrySlut/arcane/refs/heads/main/auto_siren_rock_platform_builder.txt',
        category = 'Building',
        icon = 'üèóÔ∏è',
    },
    {
        name = 'Enemy Expander',
        description = 'Expands enemies with anchor system',
        url = 'https://raw.githubusercontent.com/SultrySlut/arcane/refs/heads/main/enemy_highlighter_with_anchor.txt',
        category = 'Combat',
        icon = '‚öîÔ∏è',
    },
    {
        name = 'Siren Rock Detector',
        description = 'Continuously detects Siren Rock',
        url = 'https://raw.githubusercontent.com/SultrySlut/arcane/refs/heads/main/sirenrock-continuous-detector.txt',
        category = 'Navigation',
        icon = 'üì°',
    },
    {
        name = 'UW Discovery Tracker',
        description = 'Tracks underwater discoveries',
        url = 'https://raw.githubusercontent.com/SultrySlut/arcane/refs/heads/main/uw_discovery_tracker.txt',
        category = 'Navigation',
        icon = 'üó∫Ô∏è',
    },
    {
        name = 'UW Structure Esp',
        description = 'Chest and Auric Seaweed Esp',
        url = 'https://raw.githubusercontent.com/SultrySlut/arcane/refs/heads/main/uw_structure_script.txt',
        category = 'Navigation',
        icon = 'üèóÔ∏è',
    },
    {
    name        = 'Player ESP',
    description = 'Highlights other players with distance / HP overlay',
    url         = 'https://raw.githubusercontent.com/SultrySlut/arcane/refs/heads/main/Player%20Esp',
    category    = 'Navigation',
    icon        = 'üßç',
    },
   
    {
        name = 'Waypoints',
        description = 'Create and manage waypoints',
        url = 'https://raw.githubusercontent.com/SultrySlut/arcane/refs/heads/main/waypoint-system.txt',
        category = 'Navigation',
        icon = 'üìç',
    },
    {
        name = 'No Fog & Fullbright',
        description = 'Removes fog and enables fullbright',
        url = 'https://raw.githubusercontent.com/SultrySlut/arcane/refs/heads/main/nofog_fullbright_script.txt',
        category = 'Visual',
        icon = 'üí°',
    },
    {
        name = 'No More DS Effects',
        description = 'Disables Insanity and Dark Water Poisoning',
        url = 'https://raw.githubusercontent.com/SultrySlut/arcane/refs/heads/main/remote-deletion-no-hunger.txt',
        category = 'Status Effect',
        icon = 'üõ°Ô∏è',
    },
    {
        name = 'Noclip GUI',
        description = 'Walk through walls with GUI controls',
        url = 'https://raw.githubusercontent.com/SultrySlut/arcane/refs/heads/main/noclip_gui_script.txt',
        category = 'Movement',
        icon = 'üëª',
    },
         {
        name = 'Vehicle Fly',
        description = 'Makes vehicles fly',
        url = 'https://raw.githubusercontent.com/SultrySlut/arcane/refs/heads/main/vehicle-fly-lua-script.txt',
        category = 'Movement',
        icon = 'üöÅ',
    },
    
}

--// Compatibility / Safety Layer
local function _hasFS()
    return typeof(isfile) == 'function'
        and typeof(writefile) == 'function'
        and typeof(readfile) == 'function'
        and typeof(makefolder) == 'function'
        and typeof(isfolder) == 'function'
end

local FS = {
    isfile = typeof(isfile) == 'function' and isfile or function(_)
        return false
    end,
    writefile = typeof(writefile) == 'function' and writefile or function() end,
    readfile = typeof(readfile) == 'function' and readfile or function(_)
        return nil
    end,
    makefolder = typeof(makefolder) == 'function' and makefolder
        or function() end,
    isfolder = typeof(isfolder) == 'function' and isfolder or function(_)
        return false
    end,
    delfile = typeof(delfile) == 'function' and delfile or function() end,
    delfolder = typeof(delfolder) == 'function' and delfolder or function() end,
}

local function getExecutorName()
    local ok, a = pcall(function()
        if typeof(identifyexecutor) == 'function' then
            return identifyexecutor()
        end
        if typeof(identifyexecutor) == 'string' then
            return identifyexecutor
        end
        if typeof(getexecutorname) == 'function' then
            return getexecutorname()
        end
        return 'Unknown'
    end)
    local name = ok and a or 'Unknown'
    if typeof(name) ~= 'string' then
        name = tostring(name)
    end
    return name
end

local COMPILE = loadstring or load
local function runRemoteScript(url)
    local okGet, src = pcall(function()
        return game:HttpGet(url, true)
    end)
    if not okGet or not src then
        return false, 'HttpGet failed: ' .. tostring(src)
    end
    if not COMPILE then
        return false, 'No loadstring/load available in this executor'
    end
    local chunk, cerr = COMPILE(src)
    if not chunk then
        return false, 'Compile error: ' .. tostring(cerr)
    end
    local okExec, rerr = pcall(chunk)
    if not okExec then
        return false, 'Runtime error: ' .. tostring(rerr)
    end
    return true
end

--// Execution Tracking System
local ExecutionTracker = {}
ExecutionTracker.__index = ExecutionTracker

function ExecutionTracker.new()
    local self = setmetatable({}, ExecutionTracker)
    self.folderName = 'ArcaneHub'
    self.fileName = 'ExecutionLog.json'
    self.executionData = {}
    self.fsEnabled = _hasFS()

    if self.fsEnabled and not FS.isfolder(self.folderName) then
        FS.makefolder(self.folderName)
    end

    self:loadData()
    return self
end

function ExecutionTracker:loadData()
    self.executionData = {}
    if not self.fsEnabled then
        return
    end
    local filePath = self.folderName .. '/' .. self.fileName
    if FS.isfile(filePath) then
        local success, data = pcall(function()
            return HttpService:JSONDecode(FS.readfile(filePath) or '{}')
        end)
        if success and type(data) == 'table' then
            self.executionData = data
        end
    end
end

function ExecutionTracker:saveData()
    if not self.fsEnabled then
        return
    end
    local filePath = self.folderName .. '/' .. self.fileName
    local ok, enc = pcall(function()
        return HttpService:JSONEncode(self.executionData)
    end)
    if ok and enc then
        FS.writefile(filePath, enc)
    end
end

function ExecutionTracker:hasExecuted(scriptName)
    return self.executionData[scriptName] ~= nil
end

function ExecutionTracker:recordExecution(scriptName)
    self.executionData[scriptName] = {
        timestamp = os.time(),
        date = os.date('%Y-%m-%d %H:%M:%S'),
        executor = getExecutorName(),
    }
    self:saveData()
end

function ExecutionTracker:clearExecution(scriptName)
    if self.executionData[scriptName] then
        self.executionData[scriptName] = nil
        self:saveData()
        return true
    end
    return false
end

function ExecutionTracker:clearAllExecutions()
    self.executionData = {}
    self:saveData()
end

function ExecutionTracker:getExecutionLog()
    return self.executionData
end

function ExecutionTracker:wipeAllData()
    self.executionData = {}
    if not self.fsEnabled then
        return
    end
    local filePath = self.folderName .. '/' .. self.fileName
    if FS.isfile(filePath) then
        FS.delfile(filePath)
    end
    pcall(function()
        if FS.isfolder(self.folderName) then
            FS.delfolder(self.folderName)
        end
    end)
end

-- Initialize tracker
local tracker = ExecutionTracker.new()

-- Auto-cleanup functions
local function setupAutoCleanup()
    Players.PlayerRemoving:Connect(function(player)
        if player == Player then
            tracker:wipeAllData()
        end
    end)
end

--// UI Helpers
local function createGlassEffect(frame)
    frame.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    frame.BackgroundTransparency = 0.85
    frame.BorderSizePixel = 0

    local border = Instance.new('UIStroke')
    border.Color = Color3.fromRGB(255, 255, 255)
    border.Transparency = 0.7
    border.Thickness = 1
    border.Parent = frame

    local corner = Instance.new('UICorner')
    corner.CornerRadius = UDim.new(0, 16)
    corner.Parent = frame

    return frame
end

local function createNotification(title, message, icon, color)
    local notification = Instance.new('Frame')
    notification.Name = 'Notification'
    notification.Size = UDim2.new(0, 350, 0, 80)
    notification.Position = UDim2.new(1, -370, 0, 20)
    notification.BackgroundColor3 = color or Color3.fromRGB(138, 43, 226)
    notification.BackgroundTransparency = 0.1
    notification.BorderSizePixel = 0
    notification.ZIndex = 1000
    notification.Parent = PlayerGui:FindFirstChild('ArcaneHub') or PlayerGui

    createGlassEffect(notification)

    local iconLabel = Instance.new('TextLabel')
    iconLabel.Size = UDim2.new(0, 40, 1, 0)
    iconLabel.Position = UDim2.new(0, 15, 0, 0)
    iconLabel.BackgroundTransparency = 1
    iconLabel.Text = icon or '‚ú®'
    iconLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    iconLabel.TextScaled = true
    iconLabel.Font = Enum.Font.SourceSansBold
    iconLabel.Parent = notification

    local titleLabel = Instance.new('TextLabel')
    titleLabel.Size = UDim2.new(1, -70, 0.5, 0)
    titleLabel.Position = UDim2.new(0, 60, 0, 5)
    titleLabel.BackgroundTransparency = 1
    titleLabel.Text = title
    titleLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    titleLabel.TextScaled = true
    titleLabel.Font = Enum.Font.SourceSansBold
    titleLabel.TextXAlignment = Enum.TextXAlignment.Left
    titleLabel.Parent = notification

    local messageLabel = Instance.new('TextLabel')
    messageLabel.Size = UDim2.new(1, -70, 0.5, -5)
    messageLabel.Position = UDim2.new(0, 60, 0.5, 0)
    messageLabel.BackgroundTransparency = 1
    messageLabel.Text = message
    messageLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    messageLabel.TextTransparency = 0.3
    messageLabel.TextScaled = true
    messageLabel.Font = Enum.Font.SourceSans
    messageLabel.TextXAlignment = Enum.TextXAlignment.Left
    messageLabel.TextWrapped = true
    messageLabel.Parent = notification

    notification.Position = UDim2.new(1, 20, 0, 20)
    TweenService
        :Create(
            notification,
            TweenInfo.new(0.5, Enum.EasingStyle.Quart, Enum.EasingDirection.Out),
            { Position = UDim2.new(1, -370, 0, 20) }
        )
        :Play()

    task.spawn(function()
        task.wait(5)
        local slideOut = TweenService:Create(
            notification,
            TweenInfo.new(0.5, Enum.EasingStyle.Quart, Enum.EasingDirection.In),
            { Position = UDim2.new(1, 20, 0, 20) }
        )
        slideOut:Play()
        slideOut.Completed:Connect(function()
            if notification and notification.Parent then
                notification:Destroy()
            end
        end)
    end)
end

--// Create Main GUI
local screenGui = Instance.new('ScreenGui')
screenGui.Name = 'ArcaneHub'
screenGui.ResetOnSpawn = false
screenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
screenGui.Parent = PlayerGui

-- Setup auto-cleanup
setupAutoCleanup()

-- Main Container
local mainFrame = Instance.new('Frame')
mainFrame.Name = 'MainFrame'
mainFrame.Size = UDim2.new(0, 1000, 0, 700)
mainFrame.Position = UDim2.new(0.5, -500, 0.5, -350)
mainFrame.BackgroundTransparency = 1
mainFrame.ZIndex = 2
mainFrame.Parent = screenGui

-- Background wallpaper (back layer)
local backgroundWallpaper = Instance.new('ImageLabel')
backgroundWallpaper.Name = 'BackgroundWallpaper'
backgroundWallpaper.Size = UDim2.new(1, 0, 1, 0)
backgroundWallpaper.Position = UDim2.new(0, 0, 0, 0)
backgroundWallpaper.BackgroundTransparency = 1
backgroundWallpaper.Image = 'rbxassetid://108506133175739'
backgroundWallpaper.ImageTransparency = 0
backgroundWallpaper.ScaleType = Enum.ScaleType.Stretch
backgroundWallpaper.ZIndex = 1
backgroundWallpaper.Parent = mainFrame

local bgCorner = Instance.new('UICorner')
bgCorner.CornerRadius = UDim.new(0, 16)
bgCorner.Parent = backgroundWallpaper

-- === Gradient overlay (your colors) ===
local gradientOverlay = Instance.new('Frame')
gradientOverlay.Name = 'GradientOverlay'
gradientOverlay.Size = UDim2.new(1, 0, 1, 0)
gradientOverlay.Position = UDim2.new(0, 0, 0, 0)
gradientOverlay.BackgroundTransparency = 0 -- must be 0 for UIGradient to render
gradientOverlay.BackgroundColor3 = Color3.fromRGB(255, 255, 255) -- neutral base
gradientOverlay.ZIndex = 2
gradientOverlay.Parent = mainFrame

local overlayCorner = Instance.new('UICorner')
overlayCorner.CornerRadius = UDim.new(0, 16)
overlayCorner.Parent = gradientOverlay

local overlayGradient = Instance.new('UIGradient')
overlayGradient.Color = ColorSequence.new({
    ColorSequenceKeypoint.new(0, Color3.fromRGB(120, 72, 144)), -- top
    ColorSequenceKeypoint.new(1, Color3.fromRGB(198, 211, 227)), -- bottom
})
overlayGradient.Transparency = NumberSequence.new({
    NumberSequenceKeypoint.new(0, 0.45), -- top opacity (lower = darker)
    NumberSequenceKeypoint.new(1, 0.65), -- bottom opacity
})
overlayGradient.Rotation = 90 -- vertical gradient
overlayGradient.Parent = gradientOverlay
-- === end gradient overlay ===

-- Header
local header = Instance.new('Frame')
header.Name = 'Header'
header.Size = UDim2.new(1, 0, 0, 80)
header.Position = UDim2.new(0, 0, 0, 0)
header.ZIndex = 10
header.Parent = mainFrame
createGlassEffect(header)

local logo = Instance.new('TextLabel')
logo.Size = UDim2.new(0, 300, 1, 0)
logo.Position = UDim2.new(0, 20, 0, 0)
logo.BackgroundTransparency = 1
logo.Text = '‚ö° ARCANE HUB'
logo.TextColor3 = Color3.fromRGB(255, 255, 255)
logo.TextScaled = true
logo.Font = Enum.Font.SourceSansBold
logo.TextXAlignment = Enum.TextXAlignment.Left
logo.ZIndex = 11
logo.Parent = header

local status = Instance.new('TextLabel')
status.Size = UDim2.new(0, 150, 0, 30)
status.Position = UDim2.new(1, -200, 0.5, -15)
status.BackgroundTransparency = 1
status.Text = 'üü¢ Connected'
status.TextColor3 = Color3.fromRGB(16, 185, 129)
status.TextScaled = true
status.Font = Enum.Font.SourceSansBold
status.ZIndex = 11
status.Parent = header

-- Content Container
local contentFrame = Instance.new('Frame')
contentFrame.Name = 'ContentFrame'
contentFrame.Size = UDim2.new(1, 0, 1, -100)
contentFrame.Position = UDim2.new(0, 0, 0, 90)
contentFrame.BackgroundTransparency = 1
contentFrame.ZIndex = 5
contentFrame.Parent = mainFrame

-- Sidebar
local sidebar = Instance.new('Frame')
sidebar.Name = 'Sidebar'
sidebar.Size = UDim2.new(0, 250, 1, 0)
sidebar.Position = UDim2.new(0, 0, 0, 0)
sidebar.ZIndex = 6
sidebar.Parent = contentFrame
createGlassEffect(sidebar)

-- Tab buttons
local tabs = { 'Scripts', 'Execution Log', 'Settings' }
local currentTab = 'Scripts'
local tabButtons = {}

for i, tabName in ipairs(tabs) do
    local tabButton = Instance.new('TextButton')
    tabButton.Name = tabName .. 'Tab'
    tabButton.Size = UDim2.new(1, -20, 0, 50)
    tabButton.Position = UDim2.new(0, 10, 0, (i - 1) * 60 + 20)
    tabButton.BackgroundColor3 = Color3.fromRGB(200, 162, 200)
    tabButton.BackgroundTransparency = currentTab == tabName and 0.3 or 0.6
    tabButton.BorderSizePixel = 0
    tabButton.Text = tabName
    tabButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    tabButton.TextScaled = true
    tabButton.Font = Enum.Font.SourceSansBold
    tabButton.ZIndex = 7
    tabButton.Parent = sidebar

    local corner = Instance.new('UICorner')
    corner.CornerRadius = UDim.new(0, 12)
    corner.Parent = tabButton

    local gradient = Instance.new('UIGradient')
    gradient.Color = ColorSequence.new({
        ColorSequenceKeypoint.new(0, Color3.fromRGB(200, 162, 200)),
        ColorSequenceKeypoint.new(1, Color3.fromRGB(173, 216, 230)),
    })
    gradient.Rotation = currentTab == tabName and 45 or 90
    gradient.Parent = tabButton

    local border = Instance.new('UIStroke')
    border.Color = Color3.fromRGB(173, 216, 230)
    border.Transparency = currentTab == tabName and 0.3 or 0.7
    border.Thickness = 1
    border.Parent = tabButton

    tabButtons[tabName] = tabButton
end

-- Main Panel
local mainPanel = Instance.new('Frame')
mainPanel.Name = 'MainPanel'
mainPanel.Size = UDim2.new(1, -270, 1, 0)
mainPanel.Position = UDim2.new(0, 260, 0, 0)
mainPanel.ZIndex = 6
mainPanel.Parent = contentFrame
createGlassEffect(mainPanel)

-- Panels
local scriptsPanel = Instance.new('ScrollingFrame')
scriptsPanel.Name = 'ScriptsPanel'
scriptsPanel.Size = UDim2.new(1, -20, 1, -20)
scriptsPanel.Position = UDim2.new(0, 10, 0, 10)
scriptsPanel.BackgroundTransparency = 1
scriptsPanel.BorderSizePixel = 0
scriptsPanel.ScrollBarThickness = 8
scriptsPanel.ScrollBarImageColor3 = Color3.fromRGB(200, 162, 200)
scriptsPanel.ZIndex = 7
scriptsPanel.Parent = mainPanel

local logPanel = Instance.new('ScrollingFrame')
logPanel.Name = 'LogPanel'
logPanel.Size = UDim2.new(1, -20, 1, -20)
logPanel.Position = UDim2.new(0, 10, 0, 10)
logPanel.BackgroundTransparency = 1
logPanel.BorderSizePixel = 0
logPanel.ScrollBarThickness = 8
logPanel.ScrollBarImageColor3 = Color3.fromRGB(200, 162, 200)
logPanel.ZIndex = 7
logPanel.Visible = false
logPanel.Parent = mainPanel

local settingsPanel = Instance.new('ScrollingFrame')
settingsPanel.Name = 'SettingsPanel'
settingsPanel.Size = UDim2.new(1, -20, 1, -20)
settingsPanel.Position = UDim2.new(0, 10, 0, 10)
settingsPanel.BackgroundTransparency = 1
settingsPanel.BorderSizePixel = 0
settingsPanel.ScrollBarThickness = 8
settingsPanel.ScrollBarImageColor3 = Color3.fromRGB(200, 162, 200)
settingsPanel.ZIndex = 7
settingsPanel.Visible = false
settingsPanel.Parent = mainPanel

-- Store references to script cards and buttons for easy updating
local scriptElements = {}

-- Update all checkmarks/buttons safely
local function updateAllCheckmarks()
    for scriptName, elements in pairs(scriptElements) do
        local isExecuted = tracker:hasExecuted(scriptName)

        if elements.card and elements.card.Parent then
            local existingCheckmark = elements.card:FindFirstChild('CheckMark')
            if existingCheckmark then
                existingCheckmark:Destroy()
            end

            if isExecuted then
                local checkMark = Instance.new('TextLabel')
                checkMark.Name = 'CheckMark'
                checkMark.Size = UDim2.new(0, 30, 0, 30)
                checkMark.Position = UDim2.new(1, -50, 0, 10)
                checkMark.BackgroundTransparency = 1
                checkMark.Text = '‚úÖ'
                checkMark.TextColor3 = Color3.fromRGB(16, 185, 129)
                checkMark.TextScaled = true
                checkMark.ZIndex = 9
                checkMark.Parent = elements.card
            end

            if elements.executeButton and elements.executeButton.Parent then
                if isExecuted then
                    elements.executeButton.Text = 'Executed'
                    elements.executeButton.BackgroundColor3 =
                        Color3.fromRGB(245, 158, 11)
                else
                    elements.executeButton.Text = '‚ö° Execute'
                    elements.executeButton.BackgroundColor3 =
                        Color3.fromRGB(200, 162, 200)
                end
            end
        end
    end
end

-- Refresh log display
local function refreshLogDisplay()
    if logPanel and logPanel.Parent then
        for _, child in ipairs(logPanel:GetChildren()) do
            if
                child
                and (
                    child:IsA('Frame')
                    or child:IsA('TextButton')
                    or child:IsA('TextLabel')
                )
            then
                child:Destroy()
            end
        end
    end

    local log = tracker and tracker:getExecutionLog() or {}
    local yPos = 10
    local hasLogs = false

    if log then
        for _ in pairs(log) do
            hasLogs = true
            break
        end
    end

    if hasLogs and logPanel and logPanel.Parent then
        for scriptName, data in pairs(log) do
            if scriptName and data and data.date and data.executor then
                local logItem = Instance.new('Frame')
                logItem.Size = UDim2.new(1, -20, 0, 80)
                logItem.Position = UDim2.new(0, 10, 0, yPos)
                logItem.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                logItem.BackgroundTransparency = 0.92
                logItem.BorderSizePixel = 0
                logItem.ZIndex = 8
                logItem.Parent = logPanel

                local corner = Instance.new('UICorner')
                corner.CornerRadius = UDim.new(0, 12)
                corner.Parent = logItem

                local nameLabel = Instance.new('TextLabel')
                nameLabel.Size = UDim2.new(1, -120, 0, 30)
                nameLabel.Position = UDim2.new(0, 15, 0, 5)
                nameLabel.BackgroundTransparency = 1
                nameLabel.Text = tostring(scriptName)
                nameLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
                nameLabel.TextScaled = true
                nameLabel.Font = Enum.Font.SourceSansBold
                nameLabel.TextXAlignment = Enum.TextXAlignment.Left
                nameLabel.ZIndex = 9
                nameLabel.Parent = logItem

                local infoLabel = Instance.new('TextLabel')
                infoLabel.Size = UDim2.new(1, -120, 0, 20)
                infoLabel.Position = UDim2.new(0, 15, 0, 30)
                infoLabel.BackgroundTransparency = 1
                infoLabel.Text = 'Executed: ' .. tostring(data.date)
                infoLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
                infoLabel.TextTransparency = 0.3
                infoLabel.TextScaled = true
                infoLabel.Font = Enum.Font.SourceSans
                infoLabel.TextXAlignment = Enum.TextXAlignment.Left
                infoLabel.ZIndex = 9
                infoLabel.Parent = logItem

                local executorLabel = Instance.new('TextLabel')
                executorLabel.Size = UDim2.new(1, -120, 0, 20)
                executorLabel.Position = UDim2.new(0, 15, 0, 50)
                executorLabel.BackgroundTransparency = 1
                executorLabel.Text = 'Executor: ' .. tostring(data.executor)
                executorLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
                executorLabel.TextTransparency = 0.3
                executorLabel.TextScaled = true
                executorLabel.Font = Enum.Font.SourceSans
                executorLabel.TextXAlignment = Enum.TextXAlignment.Left
                executorLabel.ZIndex = 9
                executorLabel.Parent = logItem

                local clearButton = Instance.new('TextButton')
                clearButton.Size = UDim2.new(0, 80, 0, 25)
                clearButton.Position = UDim2.new(1, -90, 0.5, -12.5)
                clearButton.BackgroundColor3 = Color3.fromRGB(200, 162, 200)
                clearButton.BackgroundTransparency = 0.2
                clearButton.BorderSizePixel = 0
                clearButton.Text = 'üóëÔ∏è Clear'
                clearButton.TextColor3 = Color3.fromRGB(255, 255, 255)
                clearButton.TextScaled = true
                clearButton.Font = Enum.Font.SourceSansBold
                clearButton.ZIndex = 9
                clearButton.Parent = logItem

                local clearCorner = Instance.new('UICorner')
                clearCorner.CornerRadius = UDim.new(0, 6)
                clearCorner.Parent = clearButton

                local clearGradient = Instance.new('UIGradient')
                clearGradient.Color = ColorSequence.new({
                    ColorSequenceKeypoint.new(0, Color3.fromRGB(200, 162, 200)),
                    ColorSequenceKeypoint.new(1, Color3.fromRGB(173, 216, 230)),
                })
                clearGradient.Rotation = 45
                clearGradient.Parent = clearButton

                local capturedScriptName = scriptName
                clearButton.MouseButton1Click:Connect(function()
                    if
                        tracker
                        and capturedScriptName
                        and tracker:clearExecution(capturedScriptName)
                    then
                        createNotification(
                            'Cleared',
                            capturedScriptName .. ' removed from log',
                            'üóëÔ∏è',
                            Color3.fromRGB(16, 185, 129)
                        )
                        task.spawn(function()
                            refreshLogDisplay()
                            task.wait(0.1)
                            updateAllCheckmarks()
                        end)
                    end
                end)

                yPos = yPos + 90
            end
        end

        if yPos > 10 then
            local clearAllButton = Instance.new('TextButton')
            clearAllButton.Size = UDim2.new(0, 150, 0, 40)
            clearAllButton.Position = UDim2.new(0.5, -75, 0, yPos + 20)
            clearAllButton.BackgroundColor3 = Color3.fromRGB(200, 162, 200)
            clearAllButton.BackgroundTransparency = 0.2
            clearAllButton.BorderSizePixel = 0
            clearAllButton.Text = 'üóëÔ∏è Clear All Logs'
            clearAllButton.TextColor3 = Color3.fromRGB(255, 255, 255)
            clearAllButton.TextScaled = true
            clearAllButton.Font = Enum.Font.SourceSansBold
            clearAllButton.ZIndex = 8
            clearAllButton.Parent = logPanel

            local clearAllCorner = Instance.new('UICorner')
            clearAllCorner.CornerRadius = UDim.new(0, 12)
            clearAllCorner.Parent = clearAllButton

            local clearAllGradient = Instance.new('UIGradient')
            clearAllGradient.Color = ColorSequence.new({
                ColorSequenceKeypoint.new(0, Color3.fromRGB(200, 162, 200)),
                ColorSequenceKeypoint.new(1, Color3.fromRGB(173, 216, 230)),
            })
            clearAllGradient.Rotation = 45
            clearAllGradient.Parent = clearAllButton

            clearAllButton.MouseButton1Click:Connect(function()
                if tracker then
                    tracker:clearAllExecutions()
                    createNotification(
                        'All Cleared',
                        'All execution logs cleared',
                        'üóëÔ∏è',
                        Color3.fromRGB(16, 185, 129)
                    )
                    task.spawn(function()
                        refreshLogDisplay()
                        task.wait(0.1)
                        updateAllCheckmarks()
                    end)
                end
            end)

            yPos = yPos + 80
        end
    end

    if logPanel and logPanel.Parent then
        logPanel.CanvasSize = UDim2.new(0, 0, 0, yPos + 20)
    end
end

-- Create settings content once
local settingsCreated = false
local function createSettingsContent()
    if settingsCreated then
        return
    end
    settingsCreated = true

    local yPos = 20

    local title = Instance.new('TextLabel')
    title.Size = UDim2.new(1, 0, 0, 40)
    title.Position = UDim2.new(0, 0, 0, yPos)
    title.BackgroundTransparency = 1
    title.Text = 'Hub Settings'
    title.TextColor3 = Color3.fromRGB(255, 255, 255)
    title.TextScaled = true
    title.Font = Enum.Font.SourceSansBold
    title.ZIndex = 8
    title.Parent = settingsPanel

    yPos = yPos + 60

    local execInfo = Instance.new('Frame')
    execInfo.Size = UDim2.new(1, -20, 0, 100)
    execInfo.Position = UDim2.new(0, 10, 0, yPos)
    execInfo.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    execInfo.BackgroundTransparency = 0.92
    execInfo.BorderSizePixel = 0
    execInfo.ZIndex = 8
    execInfo.Parent = settingsPanel

    local execCorner = Instance.new('UICorner')
    execCorner.CornerRadius = UDim.new(0, 12)
    execCorner.Parent = execInfo

    local execLabel = Instance.new('TextLabel')
    execLabel.Size = UDim2.new(1, -20, 0, 30)
    execLabel.Position = UDim2.new(0, 10, 0, 10)
    execLabel.BackgroundTransparency = 1
    execLabel.Text = 'Current Executor'
    execLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    execLabel.TextScaled = true
    execLabel.Font = Enum.Font.SourceSansBold
    execLabel.TextXAlignment = Enum.TextXAlignment.Left
    execLabel.ZIndex = 9
    execLabel.Parent = execInfo

    local execValue = Instance.new('TextLabel')
    execValue.Size = UDim2.new(1, -20, 0, 50)
    execValue.Position = UDim2.new(0, 10, 0, 40)
    execValue.BackgroundTransparency = 1
    execValue.Text = getExecutorName()
    execValue.TextColor3 = Color3.fromRGB(200, 162, 200)
    execValue.TextScaled = true
    execValue.Font = Enum.Font.SourceSans
    execValue.TextXAlignment = Enum.TextXAlignment.Left
    execValue.ZIndex = 9
    execValue.Parent = execInfo

    local execTextGradient = Instance.new('UIGradient')
    execTextGradient.Color = ColorSequence.new({
        ColorSequenceKeypoint.new(0, Color3.fromRGB(200, 162, 200)),
        ColorSequenceKeypoint.new(1, Color3.fromRGB(173, 216, 230)),
    })
    execTextGradient.Rotation = 45
    execTextGradient.Parent = execValue

    yPos = yPos + 120

    local statsFrame = Instance.new('Frame')
    statsFrame.Size = UDim2.new(1, -20, 0, 120)
    statsFrame.Position = UDim2.new(0, 10, 0, yPos)
    statsFrame.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    statsFrame.BackgroundTransparency = 0.92
    statsFrame.BorderSizePixel = 0
    statsFrame.ZIndex = 8
    statsFrame.Parent = settingsPanel

    local statsCorner = Instance.new('UICorner')
    statsCorner.CornerRadius = UDim.new(0, 12)
    statsCorner.Parent = statsFrame

    local statsTitle = Instance.new('TextLabel')
    statsTitle.Size = UDim2.new(1, -20, 0, 30)
    statsTitle.Position = UDim2.new(0, 10, 0, 10)
    statsTitle.BackgroundTransparency = 1
    statsTitle.Text = 'Hub Statistics'
    statsTitle.TextColor3 = Color3.fromRGB(255, 255, 255)
    statsTitle.TextScaled = true
    statsTitle.Font = Enum.Font.SourceSansBold
    statsTitle.TextXAlignment = Enum.TextXAlignment.Left
    statsTitle.ZIndex = 9
    statsTitle.Parent = statsFrame

    local execCount = 0
    for _ in pairs(tracker:getExecutionLog()) do
        execCount += 1
    end

    local statsText = Instance.new('TextLabel')
    statsText.Size = UDim2.new(1, -20, 0, 70)
    statsText.Position = UDim2.new(0, 10, 0, 40)
    statsText.BackgroundTransparency = 1
    statsText.Text = string.format(
        'Scripts Available: %d\nScripts Executed: %d\nHub Version: v2.2',
        #SCRIPTS,
        execCount
    )
    statsText.TextColor3 = Color3.fromRGB(255, 255, 255)
    statsText.TextTransparency = 0.3
    statsText.TextScaled = true
    statsText.Font = Enum.Font.SourceSans
    statsText.TextXAlignment = Enum.TextXAlignment.Left
    statsText.TextYAlignment = Enum.TextYAlignment.Top
    statsText.ZIndex = 9
    statsText.Parent = statsFrame

    settingsPanel.CanvasSize = UDim2.new(0, 0, 0, yPos + 140)
end

-- Build script cards
local categories = {}
local yPosition = 0

for _, script in ipairs(SCRIPTS) do
    if not categories[script.category] then
        categories[script.category] = true

        local categoryHeader = Instance.new('TextLabel')
        categoryHeader.Size = UDim2.new(1, 0, 0, 40)
        categoryHeader.Position = UDim2.new(0, 0, 0, yPosition)
        categoryHeader.BackgroundTransparency = 1
        categoryHeader.Text = script.category
        categoryHeader.TextColor3 = Color3.fromRGB(255, 255, 255)
        categoryHeader.TextScaled = true
        categoryHeader.Font = Enum.Font.SourceSansBold
        categoryHeader.TextXAlignment = Enum.TextXAlignment.Left
        categoryHeader.ZIndex = 8
        categoryHeader.Parent = scriptsPanel

        yPosition = yPosition + 50
    end

    local scriptCard = Instance.new('Frame')
    scriptCard.Size = UDim2.new(1, -20, 0, 120)
    scriptCard.Position = UDim2.new(0, 10, 0, yPosition)
    scriptCard.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    scriptCard.BackgroundTransparency = 0.92
    scriptCard.BorderSizePixel = 0
    scriptCard.ZIndex = 8
    scriptCard.Parent = scriptsPanel

    local corner = Instance.new('UICorner')
    corner.CornerRadius = UDim.new(0, 12)
    corner.Parent = scriptCard

    local border = Instance.new('UIStroke')
    border.Color = Color3.fromRGB(255, 255, 255)
    border.Transparency = 0.8
    border.Thickness = 1
    border.Parent = scriptCard

    local scriptIcon = Instance.new('TextLabel')
    scriptIcon.Size = UDim2.new(0, 40, 0, 40)
    scriptIcon.Position = UDim2.new(0, 15, 0, 15)
    scriptIcon.BackgroundTransparency = 1
    scriptIcon.Text = script.icon
    scriptIcon.TextColor3 = Color3.fromRGB(255, 255, 255)
    scriptIcon.TextScaled = true
    scriptIcon.Font = Enum.Font.SourceSansBold
    scriptIcon.ZIndex = 9
    scriptIcon.Parent = scriptCard

    local scriptName = Instance.new('TextLabel')
    scriptName.Name = 'ScriptName'
    scriptName.Size = UDim2.new(1, -180, 0, 30)
    scriptName.Position = UDim2.new(0, 65, 0, 10)
    scriptName.BackgroundTransparency = 1
    scriptName.Text = script.name
    scriptName.TextColor3 = Color3.fromRGB(255, 255, 255)
    scriptName.TextScaled = true
    scriptName.Font = Enum.Font.SourceSansBold
    scriptName.TextXAlignment = Enum.TextXAlignment.Left
    scriptName.ZIndex = 9
    scriptName.Parent = scriptCard

    local isExecuted = tracker:hasExecuted(script.name)
    if isExecuted then
        local checkMark = Instance.new('TextLabel')
        checkMark.Name = 'CheckMark'
        checkMark.Size = UDim2.new(0, 30, 0, 30)
        checkMark.Position = UDim2.new(1, -50, 0, 10)
        checkMark.BackgroundTransparency = 1
        checkMark.Text = '‚úÖ'
        checkMark.TextColor3 = Color3.fromRGB(16, 185, 129)
        checkMark.TextScaled = true
        checkMark.ZIndex = 9
        checkMark.Parent = scriptCard
    end

    local scriptDesc = Instance.new('TextLabel')
    scriptDesc.Size = UDim2.new(1, -80, 0, 40)
    scriptDesc.Position = UDim2.new(0, 65, 0, 40)
    scriptDesc.BackgroundTransparency = 1
    scriptDesc.Text = script.description
    scriptDesc.TextColor3 = Color3.fromRGB(255, 255, 255)
    scriptDesc.TextTransparency = 0.3
    scriptDesc.TextScaled = true
    scriptDesc.Font = Enum.Font.SourceSans
    scriptDesc.TextXAlignment = Enum.TextXAlignment.Left
    scriptDesc.TextWrapped = true
    scriptDesc.ZIndex = 9
    scriptDesc.Parent = scriptCard

    local executeButton = Instance.new('TextButton')
    executeButton.Name = 'ExecuteButton'
    executeButton.Size = UDim2.new(0, 100, 0, 30)
    executeButton.Position = UDim2.new(0, 15, 1, -40)
    executeButton.BackgroundColor3 = isExecuted and Color3.fromRGB(245, 158, 11)
        or Color3.fromRGB(200, 162, 200)
    executeButton.BackgroundTransparency = 0.2
    executeButton.BorderSizePixel = 0
    executeButton.Text = isExecuted and 'Executed' or '‚ö° Execute'
    executeButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    executeButton.TextScaled = true
    executeButton.Font = Enum.Font.SourceSansBold
    executeButton.ZIndex = 9
    executeButton.Parent = scriptCard

    local execCorner = Instance.new('UICorner')
    execCorner.CornerRadius = UDim.new(0, 8)
    execCorner.Parent = executeButton

    local execGradient = Instance.new('UIGradient')
    execGradient.Color = ColorSequence.new({
        ColorSequenceKeypoint.new(0, Color3.fromRGB(200, 162, 200)),
        ColorSequenceKeypoint.new(1, Color3.fromRGB(173, 216, 230)),
    })
    execGradient.Rotation = 45
    execGradient.Parent = executeButton

    scriptElements[script.name] = {
        card = scriptCard,
        executeButton = executeButton,
    }

    executeButton.MouseButton1Click:Connect(function()
        if tracker:hasExecuted(script.name) then
            createNotification(
                'Already Executed',
                script.name .. ' has already been executed',
                '‚ö†Ô∏è',
                Color3.fromRGB(245, 158, 11)
            )
            return
        end

        local ok, err = runRemoteScript(script.url)
        if ok then
            tracker:recordExecution(script.name)
            createNotification(
                'Success',
                script.name .. ' executed successfully!',
                '‚úÖ',
                Color3.fromRGB(16, 185, 129)
            )

            executeButton.Text = 'Executed'
            executeButton.BackgroundColor3 = Color3.fromRGB(245, 158, 11)

            if not scriptCard:FindFirstChild('CheckMark') then
                local checkMark = Instance.new('TextLabel')
                checkMark.Name = 'CheckMark'
                checkMark.Size = UDim2.new(0, 30, 0, 30)
                checkMark.Position = UDim2.new(1, -50, 0, 10)
                checkMark.BackgroundTransparency = 1
                checkMark.Text = '‚úÖ'
                checkMark.TextColor3 = Color3.fromRGB(16, 185, 129)
                checkMark.TextScaled = true
                checkMark.ZIndex = 9
                checkMark.Parent = scriptCard
            end

            if currentTab == 'Execution Log' then
                refreshLogDisplay()
            end
        else
            createNotification(
                'Execution Failed',
                'Failed to execute ' .. script.name .. '\n' .. tostring(err),
                '‚ùå',
                Color3.fromRGB(239, 68, 68)
            )
        end
    end)

    executeButton.MouseEnter:Connect(function()
        TweenService
            :Create(executeButton, TweenInfo.new(0.2, Enum.EasingStyle.Quad), {
                BackgroundTransparency = 0.1,
                Size = UDim2.new(0, 105, 0, 32),
            })
            :Play()
    end)

    executeButton.MouseLeave:Connect(function()
        TweenService
            :Create(executeButton, TweenInfo.new(0.2, Enum.EasingStyle.Quad), {
                BackgroundTransparency = 0.2,
                Size = UDim2.new(0, 100, 0, 30),
            })
            :Play()
    end)

    yPosition = yPosition + 140
end

scriptsPanel.CanvasSize = UDim2.new(0, 0, 0, yPosition)

-- Tab switching functionality (nil-safe)
for tabName, button in pairs(tabButtons) do
    button.MouseButton1Click:Connect(function()
        for name, btn in pairs(tabButtons) do
            local stroke = btn:FindFirstChildWhichIsA('UIStroke')
            local grad = btn:FindFirstChildWhichIsA('UIGradient')
            if name == tabName then
                btn.BackgroundTransparency = 0.3
                btn.BackgroundColor3 = Color3.fromRGB(200, 162, 200)
                if stroke then
                    stroke.Transparency = 0.3
                end
                if grad then
                    grad.Rotation = 45
                end
            else
                btn.BackgroundTransparency = 0.6
                btn.BackgroundColor3 = Color3.fromRGB(200, 162, 200)
                if stroke then
                    stroke.Transparency = 0.7
                end
                if grad then
                    grad.Rotation = 90
                end
            end
        end

        scriptsPanel.Visible = (tabName == 'Scripts')
        logPanel.Visible = (tabName == 'Execution Log')
        settingsPanel.Visible = (tabName == 'Settings')

        if tabName == 'Execution Log' then
            refreshLogDisplay()
        elseif tabName == 'Settings' then
            createSettingsContent()
        end

        currentTab = tabName
    end)
end

-- Close button
local closeButton = Instance.new('TextButton')
closeButton.Size = UDim2.new(0, 30, 0, 30)
closeButton.Position = UDim2.new(1, -40, 0, 10)
closeButton.BackgroundColor3 = Color3.fromRGB(200, 162, 200)
closeButton.BackgroundTransparency = 0.2
closeButton.BorderSizePixel = 0
closeButton.Text = 'X'
closeButton.TextColor3 = Color3.fromRGB(255, 255, 255)
closeButton.TextScaled = true
closeButton.Font = Enum.Font.SourceSansBold
closeButton.ZIndex = 12
closeButton.Parent = header

local closeCorner = Instance.new('UICorner')
closeCorner.CornerRadius = UDim.new(1, 0)
closeCorner.Parent = closeButton

local closeGradient = Instance.new('UIGradient')
closeGradient.Color = ColorSequence.new({
    ColorSequenceKeypoint.new(0, Color3.fromRGB(200, 162, 200)),
    ColorSequenceKeypoint.new(1, Color3.fromRGB(173, 216, 230)),
})
closeGradient.Rotation = 45
closeGradient.Parent = closeButton

closeButton.MouseButton1Click:Connect(function()
    mainFrame.Visible = false
end)

-- Dragging
local dragging = false
local dragStart, startPos

header.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 then
        dragging = true
        dragStart = input.Position
        startPos = mainFrame.Position
    end
end)

header.InputChanged:Connect(function(input)
    if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
        local delta = input.Position - dragStart
        mainFrame.Position = UDim2.new(
            startPos.X.Scale,
            startPos.X.Offset + delta.X,
            startPos.Y.Scale,
            startPos.Y.Offset + delta.Y
        )
    end
end)

UserInputService.InputEnded:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 then
        dragging = false
    end
end)

-- Keybind to toggle GUI (RightBracket ']')
UserInputService.InputBegan:Connect(function(input, gameProcessed)
    if gameProcessed then
        return
    end
    if input.KeyCode == Enum.KeyCode.RightBracket then
        if mainFrame.Visible then
            mainFrame.Visible = false
        else
            mainFrame.Visible = true
            createNotification(
                'Hub Reopened',
                'Arcane Hub is back online!',
                '‚ö°',
                Color3.fromRGB(138, 43, 226)
            )
        end
    end
end)

-- Initial notification
createNotification(
    'Arcane Hub Loaded',
    'Successfully loaded ' .. #SCRIPTS .. ' scripts!',
    '‚ö°',
    Color3.fromRGB(138, 43, 226)
)

-- Pulsing logo animation
task.spawn(function()
    while screenGui.Parent do
        local pulse = TweenService:Create(
            logo,
            TweenInfo.new(
                2,
                Enum.EasingStyle.Sine,
                Enum.EasingDirection.InOut,
                -1,
                true
            ),
            { TextTransparency = 0.3 }
        )
        pulse:Play()
        task.wait(4)
    end
end)
